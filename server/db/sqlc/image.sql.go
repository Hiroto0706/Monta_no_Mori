// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: image.sql

package db

import (
	"context"
	"database/sql"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (title, src, type_id, filename)
VALUES ($1, $2, $3, $4)
RETURNING id, title, src, type_id, updated_at, created_at, view_count, filename
`

type CreateImageParams struct {
	Title    string `json:"title"`
	Src      string `json:"src"`
	TypeID   int64  `json:"type_id"`
	Filename string `json:"filename"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.Title,
		arg.Src,
		arg.TypeID,
		arg.Filename,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Src,
		&i.TypeID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ViewCount,
		&i.Filename,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Src,
		&i.TypeID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ViewCount,
		&i.Filename,
	)
	return i, err
}

const getImageByTitle = `-- name: GetImageByTitle :one
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
WHERE title = $1
LIMIT 1
`

func (q *Queries) GetImageByTitle(ctx context.Context, title string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageByTitle, title)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Src,
		&i.TypeID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ViewCount,
		&i.Filename,
	)
	return i, err
}

const listFavoriteImage = `-- name: ListFavoriteImage :many
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
WHERE id = ANY(string_to_array($1, ',')::int[])
ORDER BY id DESC
`

func (q *Queries) ListFavoriteImage(ctx context.Context, stringToArray string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listFavoriteImage, stringToArray)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Src,
			&i.TypeID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ViewCount,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImage = `-- name: ListImage :many
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type ListImageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImage(ctx context.Context, arg ListImageParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Src,
			&i.TypeID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ViewCount,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImageByTitle = `-- name: ListImageByTitle :many
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
WHERE title LIKE '%' || COALESCE($1) || '%'
ORDER BY id DESC
`

func (q *Queries) ListImageByTitle(ctx context.Context, title sql.NullString) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImageByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Src,
			&i.TypeID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ViewCount,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImageByType = `-- name: ListImageByType :many
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
WHERE type_id = $1
ORDER BY id DESC
`

func (q *Queries) ListImageByType(ctx context.Context, typeID int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImageByType, typeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Src,
			&i.TypeID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ViewCount,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRandomImage = `-- name: ListRandomImage :many
SELECT id, title, src, type_id, updated_at, created_at, view_count, filename
FROM images
ORDER BY RANDOM()
LIMIT $1 OFFSET $2
`

type ListRandomImageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRandomImage(ctx context.Context, arg ListRandomImageParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listRandomImage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Src,
			&i.TypeID,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ViewCount,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET title = $2,
  src = $3,
  type_id = $4,
  filename = $5
WHERE id = $1
RETURNING id, title, src, type_id, updated_at, created_at, view_count, filename
`

type UpdateImageParams struct {
	ID       int64  `json:"id"`
	Title    string `json:"title"`
	Src      string `json:"src"`
	TypeID   int64  `json:"type_id"`
	Filename string `json:"filename"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage,
		arg.ID,
		arg.Title,
		arg.Src,
		arg.TypeID,
		arg.Filename,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Src,
		&i.TypeID,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ViewCount,
		&i.Filename,
	)
	return i, err
}
