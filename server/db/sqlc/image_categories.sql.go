// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: image_categories.sql

package db

import (
	"context"
)

const createImageCategory = `-- name: CreateImageCategory :one
INSERT INTO image_categories (image_id, category_id)
VALUES ($1, $2)
RETURNING image_id, category_id
`

type CreateImageCategoryParams struct {
	ImageID    int64 `json:"image_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) CreateImageCategory(ctx context.Context, arg CreateImageCategoryParams) (ImageCategory, error) {
	row := q.db.QueryRowContext(ctx, createImageCategory, arg.ImageID, arg.CategoryID)
	var i ImageCategory
	err := row.Scan(&i.ImageID, &i.CategoryID)
	return i, err
}

const deleteImageCategory = `-- name: DeleteImageCategory :exec
DELETE FROM image_categories
WHERE image_id = $1 AND category_id = $2
`

type DeleteImageCategoryParams struct {
	ImageID    int64 `json:"image_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) DeleteImageCategory(ctx context.Context, arg DeleteImageCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteImageCategory, arg.ImageID, arg.CategoryID)
	return err
}

const getImageCategory = `-- name: GetImageCategory :one
SELECT image_id, category_id
FROM image_categories
WHERE image_id = $1 AND category_id = $2
LIMIT 1
`

type GetImageCategoryParams struct {
	ImageID    int64 `json:"image_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) GetImageCategory(ctx context.Context, arg GetImageCategoryParams) (ImageCategory, error) {
	row := q.db.QueryRowContext(ctx, getImageCategory, arg.ImageID, arg.CategoryID)
	var i ImageCategory
	err := row.Scan(&i.ImageID, &i.CategoryID)
	return i, err
}

const listImageCategoriesByCategory = `-- name: ListImageCategoriesByCategory :many
SELECT image_id, category_id
FROM image_categories
WHERE category_id = $1
ORDER BY image_id
`

func (q *Queries) ListImageCategoriesByCategory(ctx context.Context, categoryID int64) ([]ImageCategory, error) {
	rows, err := q.db.QueryContext(ctx, listImageCategoriesByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageCategory{}
	for rows.Next() {
		var i ImageCategory
		if err := rows.Scan(&i.ImageID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImageCategoriesByImage = `-- name: ListImageCategoriesByImage :many
SELECT image_id, category_id
FROM image_categories
WHERE image_id = $1
ORDER BY category_id
`

func (q *Queries) ListImageCategoriesByImage(ctx context.Context, imageID int64) ([]ImageCategory, error) {
	rows, err := q.db.QueryContext(ctx, listImageCategoriesByImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageCategory{}
	for rows.Next() {
		var i ImageCategory
		if err := rows.Scan(&i.ImageID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImageCategory = `-- name: UpdateImageCategory :exec
UPDATE image_categories
SET category_id = $2
WHERE image_id = $1
`

type UpdateImageCategoryParams struct {
	ImageID    int64 `json:"image_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) UpdateImageCategory(ctx context.Context, arg UpdateImageCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateImageCategory, arg.ImageID, arg.CategoryID)
	return err
}
