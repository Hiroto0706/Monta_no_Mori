// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: type.sql

package db

import (
	"context"
)

const createType = `-- name: CreateType :one
INSERT INTO types (name, src)
VALUES ($1, $2)
RETURNING id, name, src, updated_at, created_at
`

type CreateTypeParams struct {
	Name string `json:"name"`
	Src  string `json:"src"`
}

func (q *Queries) CreateType(ctx context.Context, arg CreateTypeParams) (Type, error) {
	row := q.db.QueryRowContext(ctx, createType, arg.Name, arg.Src)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteType = `-- name: DeleteType :exec
DELETE FROM types
WHERE id = $1
`

func (q *Queries) DeleteType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteType, id)
	return err
}

const getType = `-- name: GetType :one
SELECT id, name, src, updated_at, created_at
FROM types
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetType(ctx context.Context, id int64) (Type, error) {
	row := q.db.QueryRowContext(ctx, getType, id)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTypeByName = `-- name: GetTypeByName :one
SELECT id, name, src, updated_at, created_at
FROM types
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetTypeByName(ctx context.Context, name string) (Type, error) {
	row := q.db.QueryRowContext(ctx, getTypeByName, name)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listType = `-- name: ListType :many
SELECT id, name, src, updated_at, created_at
FROM types
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListType(ctx context.Context, arg ListTypeParams) ([]Type, error) {
	rows, err := q.db.QueryContext(ctx, listType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Type{}
	for rows.Next() {
		var i Type
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Src,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateType = `-- name: UpdateType :one
UPDATE types
SET name = $2
  AND src = $3
WHERE id = $1
RETURNING id, name, src, updated_at, created_at
`

type UpdateTypeParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Src  string `json:"src"`
}

func (q *Queries) UpdateType(ctx context.Context, arg UpdateTypeParams) (Type, error) {
	row := q.db.QueryRowContext(ctx, updateType, arg.ID, arg.Name, arg.Src)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Src,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
