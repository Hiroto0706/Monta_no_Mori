// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tag.sql

package db

import (
	"context"
	"database/sql"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
  name,
  image_id
) VALUES (
  $1, $2
) RETURNING id, name, image_id, updated_at, created_at
`

type CreateTagParams struct {
	Name    string        `json:"name"`
	ImageID sql.NullInt64 `json:"image_id"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.ImageID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, image_id, updated_at, created_at FROM tags
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTagByImageID = `-- name: GetTagByImageID :one
SELECT id, name, image_id, updated_at, created_at FROM tags
WHERE image_id = $1 LIMIT 1
`

func (q *Queries) GetTagByImageID(ctx context.Context, imageID sql.NullInt64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByImageID, imageID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTag = `-- name: ListTag :many
SELECT id, name, image_id, updated_at, created_at FROM tags
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTagParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTag(ctx context.Context, arg ListTagParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTag, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tags
SET name = $2
WHERE id = $1
RETURNING id, name, image_id, updated_at, created_at
`

type UpdateTagParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
